name: Build & Sign macOS Wrapper

on:
  workflow_dispatch:
    inputs:
      tag:
        description: Release tag (e.g. v1.2.3)
        required: true
      notarize:
        description: Submit to Apple notarization (true/false)
        required: false
        default: "true"
  release:
    types: [published]

jobs:
  build-sign-release:
    runs-on: macos-13
    env:
      GOPRIVATE: github.com/NeuronInnovations/*
      GH_TOKEN: ${{ secrets.GH_PAT }}
      SIGNING_IDENTITY: ${{ secrets.MAC_SIGNING_IDENTITY }}
      NOTARY_API_KEY_ID: ${{ secrets.ASC_API_KEY_ID }}
      NOTARY_API_ISSUER_ID: ${{ secrets.ASC_API_KEY_ISSUER }}
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect signing prerequisites
        id: signing-materials
        env:
          ASC_API_KEY: ${{ secrets.ASC_API_KEY }}
          MAC_CERT_P12: ${{ secrets.MAC_CERT_P12 }}
        run: |
          if [ -n "$ASC_API_KEY" ]; then
            echo "has_notary_api_key=true" >> "$GITHUB_OUTPUT"
          fi
          if [ -n "$MAC_CERT_P12" ]; then
            echo "has_mac_cert=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Set release tag
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            echo "RELEASE_TAG=${GITHUB_REF_NAME}" >> "$GITHUB_ENV"
          else
            echo "RELEASE_TAG=${{ github.event.inputs.tag }}" >> "$GITHUB_ENV"
          fi

      - name: Prepare notarization API key
        if: steps.signing-materials.outputs.has_notary_api_key == 'true'
        env:
          ASC_API_KEY: ${{ secrets.ASC_API_KEY }}
        run: |
          KEY_PATH="$RUNNER_TEMP/asc_api_key.p8"
          echo "$ASC_API_KEY" | base64 --decode > "$KEY_PATH"
          chmod 600 "$KEY_PATH"
          echo "NOTARY_API_KEY_PATH=$KEY_PATH" >> "$GITHUB_ENV"

      - name: Configure notarization flag
        env:
          NOTARY_API_KEY_ID: ${{ secrets.ASC_API_KEY_ID }}
          NOTARY_API_ISSUER: ${{ secrets.ASC_API_KEY_ISSUER }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          MAC_CERT_P12: ${{ secrets.MAC_CERT_P12 }}
          MAC_SIGNING_IDENTITY: ${{ secrets.MAC_SIGNING_IDENTITY }}
        run: |
          NOTARIZE_INPUT="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.notarize || 'true' }}"
          NOTARY_API_KEY_PATH=${NOTARY_API_KEY_PATH:-}

          if [ "$NOTARIZE_INPUT" = "false" ]; then
            echo "NOTARIZE=false" >> "$GITHUB_ENV"
          elif [ -n "$NOTARY_API_KEY_PATH" ] && [ -n "$NOTARY_API_KEY_ID" ] && [ -n "$NOTARY_API_ISSUER" ]; then
            echo "NOTARY_API_KEY_PATH=$NOTARY_API_KEY_PATH" >> "$GITHUB_ENV"
            echo "NOTARY_API_KEY_ID=$NOTARY_API_KEY_ID" >> "$GITHUB_ENV"
            echo "NOTARY_API_ISSUER_ID=$NOTARY_API_ISSUER" >> "$GITHUB_ENV"
            echo "NOTARIZE=true" >> "$GITHUB_ENV"
          elif [ -n "$APPLE_ID" ] && [ -n "$APPLE_TEAM_ID" ] && [ -n "$APPLE_APP_SPECIFIC_PASSWORD" ]; then
            echo "NOTARIZE=true" >> "$GITHUB_ENV"
          else
            echo "NOTARIZE=false" >> "$GITHUB_ENV"
            echo "Notarization credentials missing; skipping notarization." >> "$GITHUB_STEP_SUMMARY"
          fi

          if [ -n "$MAC_SIGNING_IDENTITY" ] && [ -z "$MAC_CERT_P12" ]; then
            echo "SIGNING_IDENTITY=" >> "$GITHUB_ENV"
            echo "Signing identity provided without certificate; signing will be skipped." >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache-dependency-path: go.sum

      - name: Capture original keychain state
        run: |
          security list-keychains -d user | tr -d '"' > "$RUNNER_TEMP/original_keychains"
          security default-keychain -d user | tr -d '"' > "$RUNNER_TEMP/original_default_keychain"
          echo "ORIGINAL_KEYCHAINS_FILE=$RUNNER_TEMP/original_keychains" >> "$GITHUB_ENV"
          echo "ORIGINAL_DEFAULT_KEYCHAIN_FILE=$RUNNER_TEMP/original_default_keychain" >> "$GITHUB_ENV"

      - name: Install signing certificate
        if: steps.signing-materials.outputs.has_mac_cert == 'true'
        env:
          MAC_CERT_P12: ${{ secrets.MAC_CERT_P12 }}
          MAC_CERT_PASSWORD: ${{ secrets.MAC_CERT_PASSWORD }}
          MAC_KEYCHAIN_PASSWORD: ${{ secrets.MAC_KEYCHAIN_PASSWORD }}
        run: |
          KEYCHAIN=build-signing.keychain-db
          security create-keychain -p "$MAC_KEYCHAIN_PASSWORD" "$KEYCHAIN"
          security set-keychain-settings -lut 21600 "$KEYCHAIN"
          security unlock-keychain -p "$MAC_KEYCHAIN_PASSWORD" "$KEYCHAIN"
          echo "$MAC_CERT_P12" | base64 --decode > signing.p12
          security import signing.p12 -k "$KEYCHAIN" -P "$MAC_CERT_PASSWORD" -T /usr/bin/codesign -T /usr/bin/security -T /usr/bin/xcrun
          security set-key-partition-list -S apple-tool:,apple: -s -k "$MAC_KEYCHAIN_PASSWORD" "$KEYCHAIN"
          security list-keychains -d user -s "$KEYCHAIN" $(security list-keychains -d user | tr -d '"')
          security default-keychain -d user -s "$KEYCHAIN"
          rm signing.p12

      - name: Build, sign, and notarize
        run: |
          GOCACHE=$PWD/.gocache GOMODCACHE=$PWD/.gomodcache ./scripts/build-release.sh

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: signed-sdk-wrapper
          path: |
            dist/neuron-wrapper-darwin64
            dist/neuron-wrapper-darwin64.zip
            dist/neuron-wrapper-darwin64.zip.sha256
            dist/neuron-wrapper-darwin64-notary.json
            dist/neuron-wrapper-darwin-arm64
            dist/neuron-wrapper-darwin-arm64.zip
            dist/neuron-wrapper-darwin-arm64.zip.sha256
            dist/neuron-wrapper-darwin-arm64-notary.json
          if-no-files-found: ignore

      - name: Attach assets to release
        if: github.event_name == 'release'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload "$RELEASE_TAG" \
            dist/neuron-wrapper-darwin64.zip \
            dist/neuron-wrapper-darwin64.zip.sha256 \
            dist/neuron-wrapper-darwin-arm64.zip \
            dist/neuron-wrapper-darwin-arm64.zip.sha256 \
            --clobber

      - name: Cleanup signing materials
        if: always()
        run: |
          set -euo pipefail

          KEYCHAIN_NAME="build-signing.keychain-db"
          KEYCHAIN_PATH="$HOME/Library/Keychains/$KEYCHAIN_NAME"

          if [ -n "${NOTARY_API_KEY_PATH:-}" ] && [ -f "$NOTARY_API_KEY_PATH" ]; then
            rm -f "$NOTARY_API_KEY_PATH"
          fi

          if security list-keychains -d user | tr -d '"' | grep -q "$KEYCHAIN_NAME"; then
            if [ -f "$KEYCHAIN_PATH" ]; then
              security delete-keychain "$KEYCHAIN_PATH" || true
            else
              security delete-keychain "$KEYCHAIN_NAME" || true
            fi
          fi

          if [ -n "${ORIGINAL_KEYCHAINS_FILE:-}" ] && [ -s "$ORIGINAL_KEYCHAINS_FILE" ]; then
            security list-keychains -d user -s $(tr '\n' ' ' < "$ORIGINAL_KEYCHAINS_FILE") || true
          fi

          if [ -n "${ORIGINAL_DEFAULT_KEYCHAIN_FILE:-}" ] && [ -s "$ORIGINAL_DEFAULT_KEYCHAIN_FILE" ]; then
            security default-keychain -d user -s "$(cat "$ORIGINAL_DEFAULT_KEYCHAIN_FILE")" || true
          fi

          rm -f "$ORIGINAL_KEYCHAINS_FILE" "$ORIGINAL_DEFAULT_KEYCHAIN_FILE" 2>/dev/null || true
          rm -rf "$RUNNER_TEMP"/asc_api_key.p8 2>/dev/null || true
          rm -rf .gocache .gomodcache
